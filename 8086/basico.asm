; I/O Address Bus decode - every device gets 0x200 addresses */

IO0  EQU  0000h
IO1  EQU  0200h
IO2  EQU  0400h
IO3  EQU  0600h
IO4  EQU  0800h
IO5  EQU  0A00h
IO6  EQU  0C00h
IO7  EQU  0E00h
IO8  EQU  1000h
IO9  EQU  1200h
IO10 EQU  1400h
IO11 EQU  1600h
IO12 EQU  1800h
IO13 EQU  1A00h
IO14 EQU  1C00h
IO15 EQU  1E00h


ADR_PPI_PORTA EQU  (IO5)     ; 0a00h
ADR_PPI_PORTB EQU  (IO5 + 02h) ; 0a02
ADR_PPI_PORTC EQU  (IO5 + 04h) ; 0a04
ADR_PPI_CONTROL EQU  (IO5 + 06h) ; 0a06

PPI_PORTA_INP EQU  10h
PPI_PORTA_OUT EQU  00h
PPI_PORTB_INP EQU  02h
PPI_PORTB_OUT EQU  00h
PPI_PORTCL_INP  EQU  01h
PPI_PORTCL_OUT  EQU  00h
PPI_PORTCH_INP  EQU  08h
PPI_PORTCH_OUT  EQU  00h
PPI_MODE_BCL_0  EQU  00h
PPI_MODE_BCL_1  EQU  04h
PPI_MODE_ACH_0  EQU  00h
PPI_MODE_ACH_1  EQU  20h
PPI_MODE_ACH_2  EQU  40h
PPI_ACTIVE  EQU  80h

  TAM_STRING EQU 200

;MEU CODIGO
CODE  SEGMENT    
;pra n precisar botar o DS: ex:MOV DS:SEGUNDOS_DEZ,0
    ASSUME DS:DATA
    org 0000h
    org 0008h
    DW OFFSET RELOGIO
    DW SEG RELOGIO
    CONT_COLUNA_PONTUACAO  DB  0
    CONT_COLUNA DB 0
    CONT_LINHA DB 0
;RESERVADO PARA VETOR DE INTERRUPCOES
    org 0400h
;MEU CODIGO
inicio:
  MOV AX,DATA
  MOV DS,AX   ; DS AGORA APONTA PARA DATA SEGMENT
  MOV AX,EXTRA
  MOV ES,AX   ; ES AGORA APONTA PARA EXTRA SEGMENT
  MOV AX,STACK
  MOV SS,AX   ; SS AGORA APONTA PARA STACK SEGMENT
 
  CALL INICIALIZA_8251

  CALL INICIALIZA_8255_PORTB_OUTPUT

  CALL GLCD_ATIVA

  CALL GLCD_CLR
;-------------------------------------------
; F = FUNÇÃO
; VAR = VARIAVEL

;-------------------------------------------------------------
;
; ESCREVE PTS: NO RODAPE
;
;-------------------------------------------------------------

      MOV AL, 0
      MOV AH, 0
      MOV SI, OFFSET FRAME1
      CALL PRINT_ICON
      
      MOV AL, 0
      MOV AH, 8
      MOV SI, OFFSET FRAME2
      CALL PRINT_ICON
      
      CALL RECEBE_CARACTER
   
     CALL GLCD_CLR
   
      CALL RANDOM_WALLS

      MOV BX, OFFSET PONTUACAO_TXT
      MOV CONT_COLUNA_PONTUACAO, 0
      CALL ESCREVE_PONTUACAO
      
      JMP MAIN

DERROTA_LOOP:

      MOV AL, 0
      MOV AH, 0
      MOV SI, OFFSET FRAMEDERROTA1
      CALL PRINT_ICON
      
      MOV AL, 0
      MOV AH, 8
      MOV SI, OFFSET FRAMEDERROTA2
      CALL PRINT_ICON

DERROTA_LOOP_P:
      
   JMP DERROTA_LOOP_P
   
VITORIA_LOOP:

      MOV AL, 0
      MOV AH, 0
      MOV SI, OFFSET FRAMEVITORIA1
      CALL PRINT_ICON
      
      MOV AL, 0
      MOV AH, 8
      MOV SI, OFFSET FRAMEVITORIA2
      CALL PRINT_ICON

VITORIA_LOOP_P:
      
   JMP VITORIA_LOOP_P
      
MAIN:

   CMP DERROTA_PAC, 1
   JE DERROTA_LOOP
   
   CMP CONT_FOOD, 1
   JL VITORIA_LOOP

  CALL DESENHA_MAPA
  
  MOV CONT_COLUNA_PONTUACAO, 6
  CALL ESCREVE_PONTUACAO_NUM
  
  CALL RECEBE_CARACTER
 
  JMP MAIN
 
;-------------------------------------------------------------
;
; DESENHA O MAPA
;
;-------------------------------------------------------------
   
 DESENHA_MAPA:
   
      PUSH AX
      PUSH BX
      PUSHF
      
      MOV COLUNA_CONT, 0
      MOV LINHA_CONT, 0
      MOV VAZIOS, 0
      
DESENHA_MAPA_LOOP:

      CMP COLUNA_CONT, 16
      JE PROX_LINHA
      
      MOV AL, LINHA_CONT
      MOV AH, COLUNA_CONT
      
      CALL GLCD_GOTO_XY_TEXT

      MOV AX, 0
      
      MOV AL, LINHA_CONT
      MOV BH, 16
      
      MUL BH
      ADD AL, COLUNA_CONT     
      
      MOV BX, AX

      MOV AL, MAPA[BX]
    
      CMP AL, 80
      JE DESENHA_PACMAN
      
      CMP AL, 32
      JE DESENHA_ESPACO
      
      CMP AL, 87
      JE DESENHA_PAREDE
      
      CMP AL, 70
      JE DESENHA_FRUTA
    
VOLTAR_DESENHA_LOOP:
    
      INC COLUNA_CONT
      
      CMP BX, 111
      JE SAIR_DESENHA_MAPA_LOOP
      JMP DESENHA_MAPA_LOOP
      
SAIR_DESENHA_MAPA_LOOP:
    
      CMP CONT_FOOD, 100
      JG DERROTA

SAIR_DESENHA_MAPA_LOOP_2:   
      POPF
      POP BX
      POP AX
      RET
 
 DERROTA:
 
      MOV DERROTA_PAC, 1
      JMP SAIR_DESENHA_MAPA_LOOP_2
 
 DESENHA_FRUTA:
 
      PUSHF
      PUSH AX
      PUSH SI
      
      MOV AL, LINHA_CONT
      MOV AH, COLUNA_CONT
      MOV SI, OFFSET FRUTA1
      
      CALL PRINT_ICON
      
      POP SI
      POP AX
      POPF
      
      JMP VOLTAR_DESENHA_LOOP
 
 
 
 
 
 
 DESENHA_PAREDE:
 
      PUSHF
      PUSH AX
      PUSH SI
      
      MOV AL, LINHA_CONT
      MOV AH, COLUNA_CONT
      MOV SI, OFFSET WALL   
      
      CALL PRINT_ICON
      
      POP SI
      POP AX
      POPF
      
      JMP VOLTAR_DESENHA_LOOP
 
 DESENHA_ESPACO:
 
      PUSHF
      PUSH AX
      PUSH SI
      
      INC VAZIOS
      
      MOV AL, LINHA_CONT
      MOV AH, COLUNA_CONT
      MOV SI, OFFSET VAZIO   
      
      CALL PRINT_ICON
      
      POP SI
      POP AX
      POPF
      
      JMP VOLTAR_DESENHA_LOOP
 
 DESENHA_PACMAN:
 
 
      PUSHF
      PUSH AX
      PUSH SI
      
      MOV AL, POS_PACMAN_LINHA
      MOV AH, POS_PACMAN_COLUNA
      
      CMP DIREITA, 1
      JE DESENHA_PACMAN_DIREITA
      
      CMP ESQUERDA, 1
      JE DESENHA_PACMAN_ESQUERDA
      
      CMP CIMA, 1
      JE DESENHA_PACMAN_CIMA
      
      CMP BAIXO, 1
      JE DESENHA_PACMAN_BAIXO

 
      
      
      POP SI
      POP AX
      POPF
      
      JMP VOLTAR_DESENHA_LOOP
      
DESENHA_PACMAN_DIREITA:

      MOV DIREITA, 0
      

      CMP ABERTO, 1
      JE DIREITA_ABERTO
      
      MOV ABERTO, 1
      
      MOV SI, OFFSET P_DIR_CL  
      
      CALL PRINT_ICON
      
      POP SI
      POP AX
      POPF
      
      JMP VOLTAR_DESENHA_LOOP
      
DIREITA_ABERTO:
 
      MOV ABERTO, 0
      
      MOV SI, OFFSET P_DIR_OP
      
      CALL PRINT_ICON
      
      POP SI
      POP AX
      POPF
      
      JMP VOLTAR_DESENHA_LOOP
 
 
 
 
 
 
 
 DESENHA_PACMAN_ESQUERDA:

      MOV ESQUERDA, 0
      
 
      CMP ABERTO, 1
      JE ESQUERDA_ABERTO
      
      MOV ABERTO, 1
      
      MOV SI, OFFSET P_ESQ_CL  
      
      CALL PRINT_ICON
      
      POP SI
      POP AX
      POPF
      
      JMP VOLTAR_DESENHA_LOOP
      
 ESQUERDA_ABERTO:
 
      MOV ABERTO, 0
      
      MOV SI, OFFSET P_ESQ_OP
      
      CALL PRINT_ICON
      
      POP SI
      POP AX
      POPF
      
      JMP VOLTAR_DESENHA_LOOP
      
      
      
 DESENHA_PACMAN_CIMA:

      MOV CIMA, 0
      
 
      CMP ABERTO, 1
      JE CIMA_ABERTO
      
      MOV ABERTO, 1
      
      MOV SI, OFFSET P_CIMA_CL  
      
      CALL PRINT_ICON
      
      POP SI
      POP AX
      POPF
      
      JMP VOLTAR_DESENHA_LOOP
      
 CIMA_ABERTO:
 
      MOV ABERTO, 0
      
      MOV SI, OFFSET P_CIMA_OP
      
      CALL PRINT_ICON
      
      POP SI
      POP AX
      POPF
      
      JMP VOLTAR_DESENHA_LOOP
      
      
      
      
      
 DESENHA_PACMAN_BAIXO:

      MOV BAIXO, 0
 
      CMP ABERTO, 1
      JE BAIXO_ABERTO
      
      MOV ABERTO, 1
      
      MOV SI, OFFSET P_BAIXO_CL  
      
      CALL PRINT_ICON
      
      POP SI
      POP AX
      POPF
      
      JMP VOLTAR_DESENHA_LOOP
      
BAIXO_ABERTO:
 
      MOV ABERTO, 0
      
      MOV SI, OFFSET P_BAIXO_OP
      
      CALL PRINT_ICON
      
      POP SI
      POP AX
      POPF
      
      JMP VOLTAR_DESENHA_LOOP
 
 ;-------------------------------------------------------------
;
; PULA LINHA
;
;-------------------------------------------------------------
 
 PROX_LINHA:
 
      INC LINHA_CONT
      MOV COLUNA_CONT, 0
      JMP DESENHA_MAPA_LOOP
      
      
      
 ;-------------------------------------------------------------
;
; RECEBE E TRATA INPUT
;
;-------------------------------------------------------------
      
RECEBE_CARACTER:

   PUSHF
   PUSH DX
     MOV MOV_IMPOSSIVEL, 0
  
    MOV DIREITA_PRESS, 0
     MOV ESQUERDA_PRESS, 0
     MOV CIMA_PRESS ,  0
     MOV BAIXO_PRESS,  0
   
AGUARDA_CARACTER:

   MOV DX, ADR_USART_STAT
   IN  AL,DX
   TEST AL,2
   JZ AGUARDA_CARACTER
   MOV DX, ADR_USART_DATA
   IN AL,DX
   CMP AL, 0EEH   ; W
   JE LETRA_W
   CMP AL, 0C2H   ; A
   JE LETRA_A
   CMP AL,0E6H    ; S
   JE LETRA_S
   CMP AL,0C8H    ; D
   JE LETRA_D

SAIR_AGUARDA_CHAR:
   POP DX
   POPF
   RET
   
   
   
   
   
 ;-------------------------------------------------------------
;
; TRATA A LETRA W
;
;-------------------------------------------------------------
   
LETRA_W:

     MOV CIMA ,  1
     MOV CIMA_PRESS, 1

      CALL CHECAR_PROX_POSICAO
      CMP MOV_IMPOSSIVEL, 1
      JE SAIR_AGUARDA_CHAR

   CALL APAGA_POSICAO_ATUAL

    DEC POS_PACMAN_LINHA
    
     CMP POS_PACMAN_LINHA, 0
    JL MAX_LINHA
   
RETURN_MAX_LINHA:
      
    MOV AL, POS_PACMAN_LINHA
    MOV BH, 16
    
    MUL BH
    ADD AL, POS_PACMAN_COLUNA     
      
   MOV BX, AX
    
   MOV MAPA[BX], 80

   JMP SAIR_AGUARDA_CHAR

   
   
 ;-------------------------------------------------------------
;
; TRATA A LETRA A
;
;-------------------------------------------------------------
   
LETRA_A:

     MOV ESQUERDA, 1
     MOV ESQUERDA_PRESS, 1

      CALL CHECAR_PROX_POSICAO
      CMP MOV_IMPOSSIVEL, 1
      JE SAIR_AGUARDA_CHAR

    CALL APAGA_POSICAO_ATUAL

    DEC POS_PACMAN_COLUNA
    
     CMP POS_PACMAN_COLUNA, 0
    JL MAX_COLUNA
   
RETURN_MAX_COLUNA:
      
    MOV AL, POS_PACMAN_LINHA
    MOV BH, 16
    
    MUL BH
    ADD AL, POS_PACMAN_COLUNA     
      
   MOV BX, AX
    
   MOV MAPA[BX], 80
   
   JMP SAIR_AGUARDA_CHAR

   
   
 ;-------------------------------------------------------------
;
; TRATA A LETRA S
;
;-------------------------------------------------------------
   
LETRA_S:

     MOV BAIXO,  1
    MOV BAIXO_PRESS, 1

      CALL CHECAR_PROX_POSICAO
      CMP MOV_IMPOSSIVEL, 1
      JE SAIR_AGUARDA_CHAR
   
    CALL APAGA_POSICAO_ATUAL

    INC POS_PACMAN_LINHA
      
    CMP POS_PACMAN_LINHA, 6
    JG ZERA_LINHA
   
RETURN_ZERA_LINHA:
      
    MOV AL, POS_PACMAN_LINHA
    MOV BH, 16
    
    MUL BH
    ADD AL, POS_PACMAN_COLUNA     
      
   MOV BX, AX
    
   MOV MAPA[BX], 80
   JMP SAIR_AGUARDA_CHAR

   
   
 ;-------------------------------------------------------------
;
; TRATA A LETRA D
;
;-------------------------------------------------------------
   
LETRA_D:

   MOV DIREITA, 1
   MOV DIREITA_PRESS, 1


   CALL CHECAR_PROX_POSICAO
   CMP MOV_IMPOSSIVEL, 1
   JE SAIR_AGUARDA_CHAR

   CALL APAGA_POSICAO_ATUAL
   
    INC POS_PACMAN_COLUNA
    
     CMP POS_PACMAN_COLUNA, 15
    JG ZERA_COLUNA
   
RETURN_ZERA_COLUNA:
      
    MOV AL, POS_PACMAN_LINHA
    MOV BH, 16
    
    MUL BH
    ADD AL, POS_PACMAN_COLUNA     
      
   MOV BX, AX
    
   MOV MAPA[BX], 80
   JMP SAIR_AGUARDA_CHAR
   
   
   
   
   
   
   
   
   
   

MAX_LINHA:
 
MOV POS_PACMAN_LINHA, 6
JMP RETURN_MAX_LINHA
   
MAX_COLUNA:
 
MOV POS_PACMAN_COLUNA, 15
JMP RETURN_MAX_COLUNA
   
 ZERA_COLUNA:
 
   MOV POS_PACMAN_COLUNA, 0
   JMP RETURN_ZERA_COLUNA
   
 ZERA_LINHA:
 
   MOV POS_PACMAN_LINHA, 0
   JMP RETURN_ZERA_LINHA
   
   
   
 ;-------------------------------------------------------------
;
; APAGA A POSIÇÃO ATUAL DO PACMAN
;
;-------------------------------------------------------------
   
APAGA_POSICAO_ATUAL:

   PUSH AX
   PUSH BX
   PUSHF

    MOV AL, POS_PACMAN_LINHA
    MOV BH, 16
    
    MUL BH
    ADD AL, POS_PACMAN_COLUNA     
      
    MOV BX, AX
    
    MOV MAPA[BX], 32
    
    POPF
    POP BX
    POP AX
    RET
   
   
   
   
   
   
 ;-------------------------------------------------------------
;
; CHECA O PROXIMO CAMPO
;
;-------------------------------------------------------------
   
CHECAR_PROX_POSICAO:

      PUSH AX
      PUSH BX
      PUSHF
      
      CMP DIREITA_PRESS, 1
      JE CHECAR_DIREITA
      
      CMP ESQUERDA_PRESS, 1
      JE CHECAR_ESQUERDA
      
      CMP CIMA_PRESS, 1
      JE CHECAR_CIMA
      
      CMP BAIXO_PRESS, 1
      JE CHECAR_BAIXO
      

     
    
 ;-------------------------------------------------------------
;
; CHECA DIREITA
;
;------------------------------------------------------------- 
   
 CHECAR_DIREITA:
       MOV AH, 0
       MOV AL, POS_PACMAN_LINHA
       MOV BH, 16
       
       MUL BH
       
       ADD AL, POS_PACMAN_COLUNA     
       INC AL
   
      MOV BX, AX
      
      CMP MAPA[BX], 87
      JE SET_IMPOSSIVEL
      CMP MAPA[BX], 70
      JE SET_FOOD
      MOV MOV_IMPOSSIVEL, 0
      POPF
      POP BX
      POP AX
      RET
 
 ;-------------------------------------------------------------
;
; CHECA ESQUERDA
;
;-------------------------------------------------------------
 
 CHECAR_ESQUERDA:
       MOV AH, 0
       MOV AL, POS_PACMAN_LINHA
       MOV BH, 16
       
       MUL BH
       ADD AL, POS_PACMAN_COLUNA     
       DEC AL
   
      MOV BX, AX
      
      CMP MAPA[BX], 87
      JE SET_IMPOSSIVEL
      CMP MAPA[BX], 70
      JE SET_FOOD
      MOV MOV_IMPOSSIVEL, 0
      POPF
      POP BX
      POP AX
      RET
      
      
      
 ;-------------------------------------------------------------
;
; CHECA CIMA
;
;-------------------------------------------------------------
      
  CHECAR_CIMA:
 
      MOV AH, 0
       MOV AL, POS_PACMAN_LINHA
       DEC AL
       MOV BH, 16
       
       MUL BH
       ADD AL, POS_PACMAN_COLUNA     
   
      MOV BX, AX
      
      CMP MAPA[BX], 87
      JE SET_IMPOSSIVEL
      CMP MAPA[BX], 70
      JE SET_FOOD
      MOV MOV_IMPOSSIVEL, 0
      POPF
      POP BX
      POP AX
      RET
      
      
      
 ;-------------------------------------------------------------
;
; CHECA BAIXO
;
;-------------------------------------------------------------
      
  CHECAR_BAIXO:
       
       MOV AH, 0
       MOV AL, POS_PACMAN_LINHA
       INC AL
       MOV BH, 16
       
       MUL BH
       ADD AL, POS_PACMAN_COLUNA     
   
      MOV BX, AX
      
      CMP MAPA[BX], 87
      JE SET_IMPOSSIVEL
      CMP MAPA[BX], 70
      JE SET_FOOD
      MOV MOV_IMPOSSIVEL, 0
      POPF
      POP BX
      POP AX
      RET
   
   
   
 ;-------------------------------------------------------------
;
; TRATA COMIDA
;
;-------------------------------------------------------------
   
SET_FOOD:

   INC CONT_PONTUACAO
   MOV MOV_IMPOSSIVEL, 0
   DEC CONT_FOOD
    POPF
    POP BX
    POP AX
    RET
   
   

   
   
 ;-------------------------------------------------------------
;
; TRATA QUANDO HOUVER PAREDE
;
;-------------------------------------------------------------
   
SET_IMPOSSIVEL:

   MOV MOV_IMPOSSIVEL, 1
   POPF
   POP BX
   POP AX
   RET
   
   
   
 ;-------------------------------------------------------------
;
; ESCREVE O TEXTO PONTUACAO
;
;-------------------------------------------------------------
   
ESCREVE_PONTUACAO:

    PUSH AX
    PUSH BX
    PUSHF
   
LOOP_ESCREVE_PONTUACAO:

    MOV AH, CONT_COLUNA_PONTUACAO
    MOV AL, 7  
    CALL GLCD_GOTO_XY_TEXT
    MOV AL,[BX]
    CALL PRINT_CAR
    INC CONT_COLUNA_PONTUACAO
    INC BX
    MOV AH, [BX]
    CMP AH, 0
    JNE LOOP_ESCREVE_PONTUACAO
    POPF
    POP BX
    POP AX
    RET
    
    

 ;-------------------------------------------------------------
;
; ESCREVE OS NUMEROS DA PONTUACAO
;
;-------------------------------------------------------------

ESCREVE_PONTUACAO_NUM:

    PUSH AX
    PUSH BX
    PUSHF
   
LOOP_ESCREVE_PONTUACAO_NUM:

    MOV AH, CONT_COLUNA_PONTUACAO
    MOV AL, 7  
    CALL GLCD_GOTO_XY_TEXT
    
    ;¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
    ;  CONTA CENTENAS
    ;_________________________________________
    
    MOV AH, 0	
    MOV AL, CONT_FOOD
    MOV CL, 100
    DIV CL
    ADD AL, 48
    CALL PRINT_CAR
    
    PUSH AX
    
    INC CONT_COLUNA_PONTUACAO
    MOV AH, CONT_COLUNA_PONTUACAO
    MOV AL, 7  
    CALL GLCD_GOTO_XY_TEXT
    
    POP AX
    
        
    ;¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
    ;  CONTA DEZENAS
    ;_________________________________________
    
    
    MOV AL, AH
    MOV AH, 0
    MOV CL, 10
    DIV CL
    ADD AL, 48
    CALL PRINT_CAR
    
    PUSH AX
    
    INC CONT_COLUNA_PONTUACAO
    MOV AH, CONT_COLUNA_PONTUACAO
    MOV AL, 7  
    CALL GLCD_GOTO_XY_TEXT
    
    POP AX
    
        
    ;¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
    ;  CONTA UNIDADES
    ;_________________________________________
    
    
    MOV AL, AH
    ADD AL, 48
    CALL PRINT_CAR
    
    POPF
    POP BX
    POP AX
    RET
    

RANDOM_FOOD:

     PUSH AX
     PUSH BX
     PUSHF
     
LOOP_RANDOM_FOOD:
      MOV AL, 0
      CALL RANDOM
      CMP AL, 110
      JG LOOP_RANDOM_FOOD
      MOV AH, 0
      MOV BX, AX
      CMP MAPA[BX], 32
      JNE LOOP_RANDOM_FOOD

      MOV MAPA[BX], 70
      
SAI_RANDOM_FOOD:

   POPF
   POP BX
   POP AX
   RET
    
RANDOM_WALLS:

     PUSH AX
     PUSH BX
     PUSHF
     
LOOP_RANDOM_WALLS:
      MOV AL, 0
      CALL RANDOM
      CMP AL, 112
      JG LOOP_RANDOM_WALLS
      MOV AH, 0
      MOV BX, AX
      CMP MAPA[BX], 32
      JNE LOOP_RANDOM_WALLS
      INC CONT_WALLS
      MOV MAPA[BX], 87
      
      CMP CONT_WALLS, 20
      JNE LOOP_RANDOM_WALLS
      
SAI_RANDOM_WALLS:

   POPF
   POP BX
   POP AX
   RET
   
   
   
   
   RANDOM:
	PUSH DX
	MOV AX,SEED ;; AX = seed
	ADD AL,CONTADOR_SEED ; ATUALIZADO A CADA 1 SEGUNDO VIA INTERRUPT
	MOV DX,8405h ;; DX = 8405h
	MUL DX ;; MUL (8405h * SEED) into dword DX:AX
;
	CMP AX,SEED
	JNZ GOTSEED ;; if new SEED = old SEED, alter SEED
	MOV AH,DL
	INC AX
GOTSEED:
	MOV SEED,AX ;; We have a new seed, so store it
	MOV AX,DX ;; AL = random number
	POP DX
	RET
   
   
   
   






































   
   
   
   
   
   
   
   
   
   
   
   
   
   
   






















































   
   
   
   
   
   
   
   
   
   
   
   
   
   




;---------------------------------------------------

;INICIALIZA PORTB E "PORTC" COMO ENTRADA
INICIALIZA_8255_PORTB_OUTPUT:
   PUSHF
   PUSH AX
   PUSH DX
   MOV DX, ADR_PPI_CONTROL
   MOV AL,0
   OR AL,PPI_PORTA_OUT
   OR AL,PPI_PORTB_OUT  
   OR AL,PPI_PORTCL_INP
   OR AL,PPI_PORTCH_INP
   OR AL,PPI_MODE_BCL_0
   OR AL,PPI_MODE_ACH_0
   OR AL,PPI_ACTIVE
   OUT DX,AL
   POP DX
   POP AX
   POPF
   RET

INICIALIZA_8255_PORT_INPUT:
   PUSHF
   PUSH AX
   PUSH DX
   MOV DX, ADR_PPI_CONTROL
   MOV AL,0
   OR AL,PPI_PORTA_OUT
   OR AL,PPI_PORTB_INP
   OR AL,PPI_PORTCL_INP
   OR AL,PPI_PORTCH_INP
   OR AL,PPI_MODE_BCL_0
   OR AL,PPI_MODE_ACH_0
   OR AL,PPI_ACTIVE
   OUT DX,AL
   POP DX
   POP AX
   POPF
   RET

;MANDA AL PARA PORTA
MANDA_PORT_A:
    PUSHF
    PUSH DX
    MOV DX,ADR_PPI_PORTA
    OUT DX,AL
    POP DX
    POPF
    RET

;MANDA AL PARA PORTB
MANDA_PORT_B:
    PUSHF
    PUSH DX
    MOV DX,ADR_PPI_PORTB
    OUT DX,AL
    POP DX
    POPF
    RET

;LE PORTB E JOGA EM AL
LE_PORT_B:
    PUSHF
    PUSH DX
    MOV DX,ADR_PPI_PORTB
    IN AL,DX
    POP DX
    POPF
    RET

;LE PORTC E JOGA EM AL
LE_PORT_C:
    PUSHF
    PUSH DX
    MOV DX,ADR_PPI_PORTC
    IN AL,DX
    POP DX
    POPF
    RET
;---------------------------------------------------------

;LIGA DISPLAY
GLCD_ON:
   CALL GLCD_CS1_LOW
   CALL GLCD_CS2_LOW
   CALL GLCD_RS_LOW
   CALL GLCD_RW_LOW
   MOV AL,03FH
   CALL MANDA_PORT_B
   CALL ENABLE_PULSE
   RET  

;------------------------------------
;POSICIONA "CURSOR" NA COLUNA
GLCD_GOTO_COL:
   PUSHF
   PUSH AX

   CALL GLCD_RS_LOW
   CALL GLCD_RW_LOW
   CMP AH,64
   JL LEFT
   
   CALL GLCD_CS2_LOW
   CALL GLCD_CS1_HIGH
   SUB AH,64
   MOV COL_DATA,AH
   JMP SAI_GOTO_COL
   
LEFT:
    CALL GLCD_CS1_LOW
    CALL GLCD_CS2_HIGH
    MOV COL_DATA,AH

SAI_GOTO_COL:
   OR COL_DATA, 40H
   AND COL_DATA, 7FH
   MOV AL,COL_DATA
   CALL MANDA_PORT_B
   CALL ENABLE_PULSE
   POP AX
   POPF
   RET

APAGAR_LETRAS:

   PUSHF
   PUSH AX
   PUSH BX
   INC BX
LOOP_APAGAR_LETRAS:
   CMP BX, 10
   JE SAIR_LOOP_APAGAR_LETRAS
   MOV AL, 0
   MOV [BX],AL
   INC BX
   JMP LOOP_APAGAR_LETRAS
SAIR_LOOP_APAGAR_LETRAS:
   POP BX
   POP AX
   POPF
   RET
   


;AND AL,00001111B
  ; MASCARA DE BITS = APAGA BITS COM 0
  ;OR AL,00001111B
  ; ASCENDE BITS ESPECIFICOS COM 1
  ;NOT AL
  ; INVERTE TODOS OS BITS
  ;XOR AL,00001111B
  ; PARA INVERTER UMA PARTE ESPECIFICA
REPETE:
  CALL DISPLAY
  JMP REPETE
 
;rotina de display
DISPLAY:
;SALVA REGISTRADORES
   PUSH AX
   PUSH BX
   PUSH DX
   
   MOV BL,SEGUNDOS_UNID
   MOV BH,0
   MOV AL,TABELA[BX]
   MOV DX,IO2
   OUT DX,AL
   MOV BL,SEGUNDOS_DEZ
   MOV BH,0
   MOV AL,TABELA[BX]
   MOV DX,IO3
   OUT DX,AL

   POP DX
   POP BX
   POP AX
   RET

GENERATE_FOOD:

   CALL RANDOM_FOOD
   INC CONT_FOOD
   MOV DELAY_SEGS, 0
   JMP RELOGIO_SAI
   
;interrupção numero 2
RELOGIO:
   PUSHF
   INC DELAY_SEGS
   INC CONTADOR_SEED
   CMP DELAY_SEGS, 1
   JE GENERATE_FOOD
   
 
RELOGIO_SAI:  
   POPF
   IRET
   
   ; 8251A USART
ADR_USART_DATA EQU  (IO4 + 00h)
;ONDE VOCE VAI MANDAR E RECEBER DADOS DO 8251

ADR_USART_CMD  EQU  (IO4 + 02h)
;É O LOCAL ONDE VOCE VAI ESCREVER PARA PROGRAMAR O 8251

ADR_USART_STAT EQU  (IO4 + 02h)
;RETORNA O STATUS SE UM CARACTER FOI DIGITADO
;RETORNA O STATUS SE POSSO TRANSMITIR CARACTER PARA O TERMINAL

INICIALIZA_8251:                                    
   MOV AL,0
   MOV DX, ADR_USART_CMD
   OUT DX,AL
   OUT DX,AL
   OUT DX,AL
   MOV AL,40H
   OUT DX,AL
   MOV AL,4DH
   OUT DX,AL
   MOV AL,37H
   OUT DX,AL
   RET

MANDA_CARACTER:
   PUSHF
   PUSH DX
   PUSH AX  ; SALVA AL  
BUSY:
   MOV DX, ADR_USART_STAT
   IN  AL,DX
   TEST AL,1
   JZ BUSY
   MOV DX, ADR_USART_DATA
   POP AX  ; RESTAURA AL
   OUT DX,AL
   POP DX
   POPF
   RET
   
 
     
 ;------------------------------------
;POSICIONA "CURSOR" NA COLUNA
GLCD_GOTO_COL_TEXT:
   PUSHF
   PUSH AX
   PUSH BX

   PUSH AX
   MOV BL,8
   MOV AL,AH
   MUL BL
   MOV BL,AL
   POP AX
   MOV AH,BL
 
   CALL GLCD_RS_LOW
   CALL GLCD_RW_LOW
   CMP AH,64
   JL LEFT_TEXT
   
   CALL GLCD_CS2_LOW
   CALL GLCD_CS1_HIGH
   SUB AH,64
   MOV COL_DATA,AH
   JMP SAI_GOTO_COL_TEXT
   
LEFT_TEXT:
    CALL GLCD_CS1_LOW
    CALL GLCD_CS2_HIGH
    MOV COL_DATA,AH

SAI_GOTO_COL_TEXT:
   OR COL_DATA, 40H
   AND COL_DATA, 7FH
   MOV AL,COL_DATA
   CALL MANDA_PORT_B
   CALL ENABLE_PULSE
   POP BX
   POP AX
   POPF
   RET
;------------------------------------
   
;------------------------------------
;POSICIONA "CURSOR" NA LINHA
GLCD_GOTO_ROW:
   PUSH AX
   CALL GLCD_RS_LOW
   CALL GLCD_RW_LOW
   OR AL,0B8H
   AND AL,0BFH
   MOV COL_DATA,AL
   CALL MANDA_PORT_B
   CALL ENABLE_PULSE
   POP AX
   RET
;------------------------------------

;------------------------------------
;POSICIONA "CURSOR" NA LINHA
GLCD_GOTO_ROW_TEXT:
   PUSH AX
   CALL GLCD_RS_LOW
   CALL GLCD_RW_LOW
   OR AL,0B8H
   AND AL,0BFH
   MOV COL_DATA,AL
   CALL MANDA_PORT_B
   CALL ENABLE_PULSE
   POP AX
   RET
;------------------------------------


;------------------------------------  
; AH LINHA E  AL COLUNA
; POSICIONAMENTO DO "CURSOR" EM LINHA X COLUNA
; MODO GRAFICO (128x64)
GLCD_GOTO_XY:
   CALL GLCD_GOTO_COL
   CALL GLCD_GOTO_ROW
   RET
;;------------------------------------  

;------------------------------------  
; AH LINHA E  AL COLUNA
; POSICIONAMENTO DO "CURSOR" EM LINHA X COLUNA
; COLUNAS 16 (0..15), LINHAS 8 (0..7)
GLCD_GOTO_XY_TEXT:
   CALL GLCD_GOTO_COL_TEXT
   CALL GLCD_GOTO_ROW_TEXT
   RET
;------------------------------------  

; AL = DATA
GLCD_WRITE:
   CALL GLCD_RS_HIGH
   CALL GLCD_RW_LOW
   CALL MANDA_PORT_B
   CALL ENABLE_PULSE
   RET
   
;AL = DATA  
GLCD_CLRLN:  
   PUSHF
   PUSH AX
   PUSH CX
   MOV AH,0
   CALL GLCD_GOTO_XY
   MOV AH,64
   CALL GLCD_GOTO_XY
   CALL GLCD_CS1_LOW
   MOV AL,0
   MOV CX,64
ESCREVA:  
   CALL GLCD_WRITE
   LOOP ESCREVA
   POP CX
   POP AX
   POPF
   RET

;---------------------------------------------------------
;APAGA DISPLAY GRAFICO
GLCD_CLR:
   PUSHF
   PUSH AX
   MOV AL,0
CLRLN:  
   CALL GLCD_CLRLN
   ADD AL,1
   CMP AL,8
   JNE CLRLN
   POP AX
   POPF
   RET
;---------------------------------------------------------

;---------------------------------------------------------
;DESENHA UM PONTO NESTAS COORDENADAS
;AH, AL, BH
;COLUNAS MODO GRAFICO = 128 (0..127) AH
;LINHAS MODO GRAFICO = 64 (0..63) AL
;BH = 0 PIXEL APAGADO, BH=1 PIXEL ACESO
GLCD_DRAW_POINT:
    PUSHF
    PUSH AX
    PUSH BX
    PUSH CX

    PUSH AX ; SALVA AH, AL
    PUSH AX ; SALVA AH, AL
   
    MOV CH,AH ; SALVA AH
    MOV AH,0

    MOV BL,8
    DIV BL
   
    MOV AH,CH
    CALL GLCD_GOTO_XY
   
    POP AX  ; RESTAURA AH, AL
   
    CMP BH,0
    JE LIGHT_SPOT
   
    MOV AH,0
    MOV BH,8
    DIV BH
    ; AH RESTO
    MOV CL,AH
    MOV AL,1
    SHL AL,CL
    MOV COL_DATA_AUX,AL
   
    MOV AH,CH
    CALL GLCD_READ_DATA
    OR COL_DATA_AUX,AL

    JMP SAI_GLCD_DRAW_POINT
   
LIGHT_SPOT:
    MOV AH,0
    MOV BH,8
    DIV BH
    ; AH RESTO
    MOV CL,AH
    MOV AL,1
    SHL AL,CL
    NOT AL
    MOV COL_DATA_AUX,AL

    MOV AH,CH
    CALL GLCD_READ_DATA
    AND COL_DATA_AUX,AL

SAI_GLCD_DRAW_POINT:
    POP AX

    MOV CH,AH ; SALVA AH
    MOV AH,0

    MOV BL,8
    DIV BL
   
    MOV AH,CH
    CALL GLCD_GOTO_XY
   
    MOV AL, COL_DATA_AUX
    CALL GLCD_WRITE
   
    POP CX
    POP BX
    POP AX
    POPF
    RET
;---------------------------------------------------------

;---------------------------------------------------------
;LE STATUS DO DISPLAY
GLCD_READ_DATA:
    CALL INICIALIZA_8255_PORT_INPUT
    CALL GLCD_RW_HIGH
    CALL GLCD_RS_HIGH
    CMP AH,63
    JG  HAB_CS2

HAB_CS1:
    CALL GLCD_CS2_HIGH
    CALL GLCD_CS1_LOW
    JMP HAB

HAB_CS2:
    CALL GLCD_CS2_LOW
    CALL GLCD_CS1_HIGH

HAB:
     CALL GLCD_EN_HIGH
     CALL GLCD_EN_LOW
     CALL GLCD_EN_HIGH
     CALL LE_PORT_B
     MOV READ_DATA,AL
     CALL GLCD_EN_LOW
     CALL INICIALIZA_8255_PORTB_OUTPUT
     RET
;---------------------------------------------------------

;---------------------------------------------------------
; AL = INDICE CARACTER FONT (COMECA EM 0)
; IMPRIME CARACTER NA LINHA E COLUNA DEFINIDA
PRINT_CAR:
  PUSHF
  PUSH AX
  PUSH BX
  PUSH CX
  MOV BL,5
  MUL BL
  MOV BX,AX
  MOV CX,5
PRINTING_CAR:
  MOV AL,FONTS[BX]
        CALL GLCD_WRITE
        INC BX
  LOOP PRINTING_CAR
  POP CX
  POP BX
  POP AX
  POPF
  RET
 
;---------------------------------------------------------
; AH = COLUNA, AL=LINHA
; PRIMEIRO BYTE DO VETOR É NUMERO DE LINHAS E COLUNAS OCUPADAS
; EXEMPLO, IMAGEM DE 24X24 PIXELS = 3 LINHAS X 3 COLUNAS
PRINT_ICON:
  PUSHF
  PUSH AX
  PUSH CX
  MOV CL,  DS:[SI]  
  MOV QNT_COLUNAS, CL ; QNT COLUNAS IMPRESSAS
  MOV SALVA_QNT_COLUNAS, CL ; GUARDA QNT PARA NOVO LACO QNT COLUNAS IMPRESSAS
  MOV POS_COLUNAS, AH ; COLUNA PASSADA COMO PARAMETRO
  MOV CL,  DS:[SI+1]
  MOV LINHA, CL ;LINHA
  ADD SI,2    ; APONTA PARA ICONE...
PRINT:
  MOV CX,8
  CALL GLCD_GOTO_XY_TEXT  
PRINTING_ICON:
        PUSH AX
  MOV AL,DS:[SI]
        CALL GLCD_WRITE
  POP  AX
        INC SI
  LOOP PRINTING_ICON
  INC AH
  DEC QNT_COLUNAS
  JNE PRINT
  MOV AH,SALVA_QNT_COLUNAS
  MOV QNT_COLUNAS,AH
  MOV AH,POS_COLUNAS
  INC AL
  DEC LINHA
  JNE PRINT
  POP CX
  POP AX
  POPF
  RET

;---------------------------------------------------------
;ESTA ROTINA IMPRIME O GRAFICO APONTADO POR SI
PLOT_BMP:
  PUSHF
  PUSH AX
  PUSH SI
  MOV AL,0
  MOV AH,0
PLOT:
  CALL GLCD_GOTO_XY
  PUSH AX
  MOV AL,[SI]
  CALL GLCD_WRITE
  POP AX
  INC SI
  INC AH
  CMP AH,127
  JNE PLOT
  MOV AH,0
  INC AL
  CMP AL,8
  JNE PLOT
  POP SI
  POP AX
  POPF
  RET
;---------------------------------------------------------

;---------------------------------------------------------
;ATIVA O GLCD
GLCD_ATIVA:
  CALL GLCD_CS1_HIGH
  CALL GLCD_CS2_HIGH
  CALL GLCD_RST_HIGH
  CALL GLCD_ON
  RET
;---------------------------------------------------------

;---------------------------------------------------------
;ESTAS ROTINAS APENAS GERAM PULSOS PARA O DISPLAY GRAFICO
GLCD_CS1_HIGH:
   PUSHF
   PUSH AX
   OR  GLCD_CONTROL, 32
   MOV AL,GLCD_CONTROL
   CALL MANDA_PORT_A
   POP AX
   POPF
   RET

GLCD_CS1_LOW:
   PUSHF
   PUSH AX
   MOV AL, 32
   NOT AL
   AND  GLCD_CONTROL, AL
   MOV AL,GLCD_CONTROL
   CALL MANDA_PORT_A
   POP AX
   POPF
   RET

GLCD_CS2_HIGH:
   PUSHF
   PUSH AX
   OR  GLCD_CONTROL, 16
   MOV AL,GLCD_CONTROL
   CALL MANDA_PORT_A
   POP AX
   POPF
   RET

GLCD_CS2_LOW:
   PUSHF
   PUSH AX
   MOV AL, 16
   NOT AL
   AND  GLCD_CONTROL, AL
   MOV AL,GLCD_CONTROL
   CALL MANDA_PORT_A
   POP AX
   POPF
   RET

GLCD_RST_HIGH:
   PUSHF
   PUSH AX
   OR  GLCD_CONTROL, 1
   MOV AL,GLCD_CONTROL
   CALL MANDA_PORT_A
   POP AX
   POPF
   RET

GLCD_RST_LOW:
   PUSHF
   PUSH AX
   MOV AL, 1
   NOT AL
   AND  GLCD_CONTROL, AL
   MOV AL,GLCD_CONTROL
   CALL MANDA_PORT_A
   POP AX
   POPF
   RET

GLCD_EN_HIGH:
   PUSHF
   PUSH AX
   OR  GLCD_CONTROL, 2
   MOV AL,GLCD_CONTROL
   CALL MANDA_PORT_A
   POP AX
   POPF
   RET

GLCD_EN_LOW:
   PUSHF
   PUSH AX
   MOV AL, 2
   NOT AL
   AND  GLCD_CONTROL, AL
   MOV AL,GLCD_CONTROL
   CALL MANDA_PORT_A
   POP AX
   POPF
   RET

GLCD_RW_HIGH:
   PUSHF
   PUSH AX
   OR  GLCD_CONTROL, 4
   MOV AL,GLCD_CONTROL
   CALL MANDA_PORT_A
   POP AX
   POPF
   RET
   
GLCD_RW_LOW:
   PUSHF
   PUSH AX
   MOV AL, 4
   NOT AL
   AND  GLCD_CONTROL, AL
   MOV AL,GLCD_CONTROL
   CALL MANDA_PORT_A
   POP AX
   POPF
   RET

GLCD_RS_HIGH:
   PUSHF
   PUSH AX
   OR  GLCD_CONTROL, 8
   MOV AL,GLCD_CONTROL
   CALL MANDA_PORT_A
   POP AX
   POPF
   RET

GLCD_RS_LOW:
   PUSHF
   PUSH AX
   MOV AL, 8
   NOT AL
   AND  GLCD_CONTROL, AL
   MOV AL,GLCD_CONTROL
   CALL MANDA_PORT_A
   POP AX
   POPF
   RET
   
ENABLE_PULSE:
   CALL GLCD_EN_HIGH
   CALL GLCD_EN_LOW
   RET
     
CODE ENDS

;MILHA PILHA
STACK SEGMENT STACK      
DW 128 DUP(?)
STACK ENDS

;MEUS DADOS
DATA      SEGMENT  
     
      GLCD_CONTROL DB 0
GLCD_DATA    DB 0
COL_DATA DB 0
COL_DATA_AUX DB 0
READ_DATA DB 0
LINHA DB 0

QNT_COLUNAS DB 0
SALVA_QNT_COLUNAS DB 0
POS_COLUNAS DB 0
     
      TABELA DB 00111111B,00000110B,01011011B,01001111B,01100110B,01101101B,01111101B,00000111B,01111111B,01101111B
       DB 01110111B,01111100B,00111001B,01011110B,01111001B,01110001B
      SEGUNDOS_UNID DB 0
      SEGUNDOS_DEZ  DB 0
      
      FRAME1 DB 8,8,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,03FH,0DFH,0EFH,0EFH,0F7H,0F7H,0F7H,07BH,07BH,0FBH
DB 0FBH,0FBH,0FBH,0FBH,0FBH,0FBH,0F7H,0F7H,0F7H,0EFH,0EFH,05FH,0BFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,01FH,0EFH,0F7H,0F7H,0F7H,0FBH,0FBH,0FBH,0FBH,0FBH,0FBH,0FBH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,007H,0F8H,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FEH,0FEH,0FFH
DB 0FFH,0FFH,07FH,0BFH,0DFH,0EFH,0F7H,0FBH,0FBH,0FDH,0FEH,0FFH,07FH,07FH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,07FH,07FH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,07FH,07FH,0FFH,0FFH,0FFH,0FFH
DB 000H,0FFH,0FFH,0FFH,0F7H,0B3H,083H,0C7H,0FFH,0FFH,0FFH,0FFH,0F7H
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0F8H,0C7H,03FH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FEH,0FDH,0FBH,0F7H,0EFH,0DFH,0DFH,0BFH,07FH,0FFH,0FEH,0FEH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FEH,0FEH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FEH,0FEH,0FFH,0FFH,0FFH,0FFH
DB 000H,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FEH,0FDH,0FBH,0FBH,0F7H,0F7H,0F7H,0EFH,0EFH,0EFH
DB 0EFH,0EFH,0EFH,0EFH,0EFH,0EFH,0F7H,0F7H,0F7H,0FBH,0FBH,0FCH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0F8H,0F3H,0E7H,0EFH,0EFH,0F7H,0FBH,0F7H,0EFH,0EFH,0EFH,0EFH,0EFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0E0H,0FAH,0FAH,0FDH,0FFH,0E0H,0FAH,0F2H,0EDH,0FFH,0E0H,0EAH,0EAH,0EEH,0FFH
DB 0EDH,0EAH,0EAH,0F6H,0FFH,0EDH,0EAH,0EAH,0F6H,0FFH,0FFH,0FFH,0E1H
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
     
    FRAME2 DB 8,8,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FBH,0FBH,0F7H,0F7H,0F7H,0EFH,01FH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,01FH,0EFH,0F7H,0F7H
DB 0F7H,0FBH,0FBH,0FBH,0FBH,0FBH,0FBH,0FBH,0FBH,0FBH,0F7H,0F7H,0F7H,0EFH,01FH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,01FH,0EFH,0F7H,0F7H,0F7H,0FBH,0FBH,0FBH,0FBH,0FBH,0FBH,0FBH,0FBH
DB 0FBH,0F7H,0F7H,0F7H,0EFH,01FH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0B3H,083H,0C7H,0FFH,0FFH,0FFH,0FFH,000H,0FFH,0FFH,0FFH,0FFH,000H,0FFH,0FFH,0FFH,0F7H
DB 0B3H,083H,0C7H,0FFH,0FFH,0FFH,0FFH,0F7H,0B3H,083H,0C7H,0FFH,0FFH,0FFH,0FFH,000H,0FFH
DB 0FFH,0FFH,0FFH,000H,0FFH,0FFH,0FFH,0F7H,0B3H,083H,0C7H,0FFH,0FFH,0FFH,0FFH,0F7H,0B3H
DB 083H,0C7H,0FFH,0FFH,0FFH,0FFH,000H,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,000H,0FFH,0FFH,0FFH,0FFH,000H,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,000H,0FFH
DB 0FFH,0FFH,0FFH,000H,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,000H,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0F7H,0FBH,0F7H,0EFH,0EFH,0E7H,0F3H,0F8H,0FFH,0FFH,0FFH,0FFH,0F8H,0F3H,0E7H,0EFH,0EFH
DB 0F7H,0FBH,0F7H,0EFH,0EFH,0EFH,0EFH,0EFH,0F7H,0FBH,0F7H,0EFH,0EFH,0E7H,0F3H,0F8H,0FFH
DB 0FFH,0FFH,0FFH,0F8H,0F3H,0E7H,0EFH,0EFH,0F7H,0FBH,0F7H,0EFH,0EFH,0EFH,0EFH,0EFH,0F7H
DB 0FBH,0F7H,0EFH,0EFH,0E7H,0F3H,0F8H,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FAH,0FAH,0E1H,0FFH,0E0H,0FDH,0FBH,0E0H,0FFH,0FCH,0FBH,0E3H,0FBH,0FCH,0FFH,0FFH,0FFH
DB 0E0H,0FBH,0F5H,0EEH,0FFH,0E0H,0EAH,0EAH,0EEH,0FFH,0FCH,0FBH,0E3H,0FBH,0FCH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
     
     FRAMEDERROTA1 DB 8,8,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,03FH,0DFH,0EFH,0EFH,0F7H,077H,0F7H,0FBH,0FBH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,007H,0F8H,0FFH,0FFH,0FFH,0FFH,0FFH,0F7H,0FAH,0FDH,0FAH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0F8H,0C7H,03FH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FEH,0FDH,0FBH,0FBH,0F7H,0F7H,0F7H,0EFH,0EFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 03FH,0BFH,0BFH,07FH,0FFH,03FH,0BFH,0BFH,0BFH,0FFH,03FH,0BFH,0BFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0F8H,0FBH,0FBH,0FCH,0FFH,0F8H,0FAH,0FAH,0FBH,0FFH,0F8H,0FEH,0FEH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH

   FRAMEDERROTA2 DB 8,8,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FBH,07BH,0FBH,0FBH,0FBH,0FBH,0FBH,0FBH,0F7H,0F7H,0F7H,0EFH,0EFH,05FH,0BFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FAH,0F7H,0FFH,0FFH,07FH,0BFH,0DFH,0EFH,0F7H,0FBH,0FBH,0FDH,0FEH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FEH,0FDH,0FBH,0F7H,0EFH,0DFH,0DFH,0BFH,07FH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0EFH,0EFH,0EFH,0EFH,0EFH,0EFH,0EFH,0EFH,0F7H,0F7H,0F7H,0FBH,0FBH,0FCH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0BFH,0BFH,0FFH,03FH,0BFH,0BFH,0BFH,0FFH,07FH,0BFH,0BFH,07FH,0FFH,0BFH,0BFH,03FH,0BFH
DB 0BFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FEH,0FFH,0FFH,0F8H,0FAH,0FAH,0FBH,0FFH,0F8H,0FEH,0FEH,0F8H,0FFH,0FFH,0FFH,0F8H,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH

FRAMEVITORIA1 DB 8,8,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,07FH
DB 07FH,03FH,03FH,03FH,0BFH,09FH,0AFH,0AFH,037H,037H,0B7H,03BH,0BBH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FEH
DB 0FFH,0FFH,007H,0F8H,0FFH,0FFH,0FFH,0FFH,0FEH,0FDH,0FAH,0F9H,0FAH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0F8H,0C7H,03FH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FEH,0FDH,0FBH,0FBH,0F7H,0F7H,0F7H,0EFH,0EFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,03FH,0FFH
DB 0FFH,0FFH,03FH,0FFH,0BFH,03FH,0BFH,0FFH,0BFH,0BFH,03FH,0BFH,0BFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FCH
DB 0FBH,0FCH,0FFH,0FFH,0FBH,0F8H,0FBH,0FFH,0FFH,0FFH,0F8H,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH

FRAMEVITORIA2 DB 8,8,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 03BH,0BBH,03BH,03BH,03BH,0FBH,0FBH,0F7H,0F7H,0F7H,0EFH,0EFH,05FH,0BFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0F9H,0FAH,0FCH,07EH,0BFH,0DFH,0EFH,0F7H,0FBH,0FBH,0FDH,0FEH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FEH,0FDH,0FBH,0F7H,0EFH,0DFH,0DFH,0BFH,07FH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0EFH,0EFH,0EFH,0EFH,0EFH,0EFH,0EFH,0F7H,0F7H,0F7H,0FBH,0FBH,0FCH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,07FH,0BFH,0BFH,07FH,0FFH,03FH,0BFH,0BFH,07FH,0FFH,0BFH,03FH,0BFH,0FFH,07FH,0BFH
DB 0BFH,07FH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FCH,0FBH,0FBH,0FCH,0FFH,0F8H,0FEH,0FCH,0FBH,0FFH,0FBH,0F8H,0FBH,0FFH,0F8H,0FEH
DB 0FEH,0F8H,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
     
      FONTS   DB      32*5 DUP(0)
    DB  00H, 00H, 00H, 00H, 00H ; (space)
    DB  00H, 00H, 5FH, 00H, 00H ; !
    DB  00H, 07H, 00H, 07H, 00H ; "
    DB  14H, 7FH, 14H, 7FH, 14H ; #
    DB  24H, 2AH, 7FH, 2AH, 12H ; $
    DB  23H, 13H, 08H, 64H, 62H ; %
    DB  36H, 49H, 55H, 22H, 50H; &
    DB  00H, 05H, 03H, 00H, 00H; '
    DB  00H, 1CH, 22H, 41H, 00H; (
    DB  00H, 41H, 22H, 1CH, 00H; )
    DB  08H, 2AH, 1CH, 2AH, 08H; *
    DB  08H, 08H, 3EH, 08H, 08H; +
    DB  00H, 50H, 30H, 00H, 00H; H,
    DB  08H, 08H, 08H, 08H, 08H; -
    DB  00H, 60H, 60H, 00H, 00H; .
    DB  20H, 10H, 08H, 04H, 02H; /
    DB  3EH, 51H, 49H, 45H, 3EH; 0
    DB  00H, 42H, 7FH, 40H, 00H; 1
    DB  42H, 61H, 51H, 49H, 46H; 2
    DB  21H, 41H, 45H, 4BH, 31H; 3
    DB  18H, 14H, 12H, 7FH, 10H; 4
    DB  27H, 45H, 45H, 45H, 39H; 5
    DB  3CH, 4AH, 49H, 49H, 30H; 6
    DB  01H, 71H, 09H, 05H, 03H; 7
    DB  36H, 49H, 49H, 49H, 36H; 8
    DB  06H, 49H, 49H, 29H, 1EH; 9
    DB  00H, 36H, 36H, 00H, 00H; :
    DB  00H, 56H, 36H, 00H, 00H; ;
    DB  00H, 08H, 14H, 22H, 41H; <
    DB  14H, 14H, 14H, 14H, 14H; =
    DB  41H, 22H, 14H, 08H, 00H; >
    DB  02H, 01H, 51H, 09H, 06H; ?
    DB  32H, 49H, 79H, 41H, 3EH; @
    DB  7EH, 11H, 11H, 11H, 7EH; A
    DB  7FH, 49H, 49H, 49H, 36H; B
    DB  3EH, 41H, 41H, 41H, 22H; C
    DB  7FH, 41H, 41H, 22H, 1CH; D
    DB  7FH, 49H, 49H, 49H, 41H; E
    DB  7FH, 09H, 09H, 01H, 01H; F
    DB  3EH, 41H, 41H, 51H, 32H; G
    DB  7FH, 08H, 08H, 08H, 7FH; H
    DB  00H, 41H, 7FH, 41H, 00H; I
    DB  20H, 40H, 41H, 3FH, 01H; J
    DB  7FH, 08H, 14H, 22H, 41H; K
    DB  7FH, 40H, 40H, 40H, 40H; L
    DB  7FH, 02H, 04H, 02H, 7FH; M
    DB  7FH, 04H, 08H, 10H, 7FH; N
    DB  3EH, 41H, 41H, 41H, 3EH; O
    DB  7FH, 09H, 09H, 09H, 06H; P
    DB  3EH, 41H, 51H, 21H, 5EH; Q
    DB  7FH, 09H, 19H, 29H, 46H; R
    DB  46H, 49H, 49H, 49H, 31H; S
    DB  01H, 01H, 7FH, 01H, 01H; T
    DB  3FH, 40H, 40H, 40H, 3FH; U
    DB  1FH, 20H, 40H, 20H, 1FH; V
    DB  7FH, 20H, 18H, 20H, 7FH; W
    DB  63H, 14H, 08H, 14H, 63H; X
    DB  03H, 04H, 78H, 04H, 03H; Y
    DB  61H, 51H, 49H, 45H, 43H; Z
    DB  00H, 00H, 7FH, 41H, 41H; [
    DB  02H, 04H, 08H, 10H, 20H; "\"
    DB  41H, 41H, 7FH, 00H, 00H; ]
    DB  04H, 02H, 01H, 02H, 04H; ^
    DB  40H, 40H, 40H, 40H, 40H; _
    DB  00H, 01H, 02H, 04H, 00H; `
    DB  20H, 54H, 54H, 54H, 78H; a
    DB  7FH, 48H, 44H, 44H, 38H; b
    DB  38H, 44H, 44H, 44H, 20H; c
    DB  38H, 44H, 44H, 48H, 7FH; d
    DB  38H, 54H, 54H, 54H, 18H; e
    DB  08H, 7EH, 09H, 01H, 02H; f
    DB  08H, 14H, 54H, 54H, 3CH; g
    DB  7FH, 08H, 04H, 04H, 78H; h
    DB  00H, 44H, 7DH, 40H, 00H; i
    DB  20H, 40H, 44H, 3DH, 00H; j
    DB  00H, 7FH, 10H, 28H, 44H; k
    DB  00H, 41H, 7FH, 40H, 00H; l
    DB  7CH, 04H, 18H, 04H, 78H; m
    DB  7CH, 08H, 04H, 04H, 78H; n
    DB  38H, 44H, 44H, 44H, 38H; o
    DB  7CH, 14H, 14H, 14H, 08H; p
    DB  08H, 14H, 14H, 18H, 7CH; q
    DB  7CH, 08H, 04H, 04H, 08H; r
    DB  48H, 54H, 54H, 54H, 20H; s
    DB  04H, 3FH, 44H, 40H, 20H; t
    DB  3CH, 40H, 40H, 20H, 7CH; u
    DB  1CH, 20H, 40H, 20H, 1CH; v
    DB  3CH, 40H, 30H, 40H, 3CH; w
    DB  44H, 28H, 10H, 28H, 44H; x
    DB  0CH, 50H, 50H, 50H, 3CH; y
    DB  44H, 64H, 54H, 4CH, 44H; z
    DB       00H, 08H, 36H, 41H, 00H; {
    DB  00H, 00H, 7FH, 00H, 00H; |
    DB  00H, 41H, 36H, 08H, 00H; }
    DB  08H, 08H, 2AH, 1CH, 08H; ->
    DB  08H, 1CH, 2AH, 08H, 08H ; <-
     
    GRAFICO_TXT DB 7,"G R A F I C O",0
    NUMEROS_TXT DB 9,"0123456789",0

      ;CONTADOR LETRAS
      VAR_CONTADOR_LETRAS DB 10 DUP(0)
      VAR_ALETRA DB 37,"O NUMERO ",0
      VAR_OCORREU DB 37," OCORREU ",0
      VAR_VEZES DB 37," VEZ(ES)",0
      VAR_DIVISOES DB 0
      
     
;-------------------------------------------------------------------------------
;
; VARIAVEIS PACMAN
;
;-------------------------------------------------------------------------------
  
  VAZIO DB 1,1,000H,000H,000H,000H,000H,000H,000H,000H
  
   P_DIR_OP DB 1,1,03CH,042H,081H,085H,091H,0A9H,0AAH,044H
   P_DIR_CL DB 1,1,03CH,042H,081H,085H,091H,091H,052H,03CH
  
   P_BAIXO_CL DB 1,1,03CH,042H,081H,0F1H,081H,089H,042H,03CH
   P_BAIXO_OP DB 1,1,07CH,082H,061H,011H,061H,089H,042H,03CH
   
   P_CIMA_CL DB 1,1,03CH,042H,091H,081H,08FH,081H,042H,03CH
   P_CIMA_OP DB 1,1,03CH,042H,091H,086H,088H,086H,041H,03EH
   
   P_ESQ_CL  DB 1,1,03CH,052H,091H,091H,085H,081H,042H,03CH
   P_ESQ_OP  DB 1,1,044H,0AAH,0A9H,091H,085H,081H,042H,03CH
  
  
  
   WALL DB 1,1,0DBH,0DBH,0DBH,018H,0DBH,0DBH,0C3H,0DBH
   
   
   
   FRUTA1 DB 1,1,000H,070H,08CH,086H,08DH,071H,000H,000H
   FRUTA2 DB 1,1,0E0H,0B8H,0E5H,002H,074H,058H,070H,000H
   FRUTA3 DB 1,1,000H,070H,08AH,08CH,08AH,072H,000H,000H
  
   MAPA DB 80, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 70
	      DB 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32
	      DB 32, 32, 32, 32, 32,32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32
	      DB 32, 32, 32, 32, 32, 70,32, 32, 32, 32, 32, 32, 32, 32, 32, 32
	      DB 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32
	      DB 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32
	      DB 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32

   PONTUACAO_TXT DB 5,"PTS: ",0
        
  COLUNA_CONT DB 0
  LINHA_CONT DB 0
  POS_VETOR DB 0
  
   ABERTO DB 0
   DIREITA DB 1
   ESQUERDA DB 0
   CIMA DB 0
   BAIXO DB 0
  
  POS_PACMAN_LINHA DB 0
  POS_PACMAN_COLUNA DB 0

  MOV_IMPOSSIVEL DB 0
  
  CONT_PONTUACAO DB 0
  
  DIREITA_PRESS DB 0
  ESQUERDA_PRESS DB 0
  CIMA_PRESS DB 0
  BAIXO_PRESS DB 0
  
   CONTADOR_SEED DB 0
   SEED DW 2332h

   CONT_WALLS DB 0
   CONT_FOOD DB 2
   
   VAZIOS DB 1
   DERROTA_PAC DB 0
   VITORIA_PAC DB 0
   
   DELAY_SEGS DB 0


      ;FORCA ------------------------------------
      VAR_BX_LETRAS_DIGITADAS DW 0
      VAR_ERROS DB 0
      VAR_MENSAGEM1 DB 37,"OLA POR FAVOR ENTRE COM UMA PALAVRA!",13,10,0
      VAR_MENSAGEM2 DB 37,"FAVOR ENTRE COM UMA LETRA",13,10,0
      VAR_MENSAGEM3 DB 37,"LETRAS JA DIGITADAS: ",0
      VAR_LIMPATELA DB 300 DUP(8),0
      VAR_LETRAS_DIGITADAS DB ?,0,255 DUP(" "),0; UM ESPACO PRO NULL
      VAR_TEXTO DB ?,45 DUP(" "),0; UM ESPACO PRO NULL
      ;VAR_TEXTO DB ?,"ABBCCVD",0
      VAR_TRACOS DB ?,256 DUP("_"),0;
   
VAR_CONTROL DB 0
     
      ;SI É AMIGO DO BX
DATA      ENDS

;EXTRA

EXTRA SEGMENT
EXTRA ENDS

end inicio